@page "/boards"
@inject HttpClient Http
@using System.Reflection
@using Newtonsoft.Json
@using SurfsUp.Utility
@using SurfsUp.Models
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@*A way to restrict access to the controller to only users with the role of Admin.*@
@attribute [Authorize]


<h1>Board Manager</h1>
<div style="display:flex; justify-content:space-between; align-items:center;">
    <p style="margin:0;">
        <button @onclick="Create" class="nav-link text-light bg-dark" style="border-radius:5px; width: 150px;">Add New Board</button>
    </p>
    @*    <form asp-controller="Boards" onsubmit="@Search()">*@
    <p style="margin:0;display:flex;">
        <select class="me-2 form-control" @bind="Type">
            <option value="">All Types</option>
            @foreach (PropertyInfo propertyInfo in typeof(Board).GetProperties())
            {
                var propName = propertyInfo.Name.ToLower();
                List<string> Hide = new List<string>() { "id", "imageurl", "rent", "rowversion", "lockdate" };
                if (!Hide.Any(s => propName.Contains(s)))
                {
                    <option value="@propName">@propertyInfo.Name</option>
                }
            }
        </select>
        <input class="form-control" type="text" placeholder="Search Text" @bind="CurrentFilter" />
        <button class="btnSearch btn btn-dark" @onclick="Search">Search</button>
    </p>
    @*    </form>*@
</div>

<div class="row" style="display:flex;flex-wrap:wrap; padding:0!important;">

    @foreach (var item in Boards)
    {
        <div class="col-xl-3 col-lg-4 col-md-6 col-sm-6">
            <div class="card" style="margin-top:15px;">
                <div class="card-header">
                    <h5 class="card-title" style="margin:0!important;"><b>@item.Name</b></h5>
                </div>
                <img style="height: 275px; margin:20px auto 20px auto;" class="card-img-top img-fluid" src="@item.ImageURL" alt="">
                <ul class="list-group list-group-flush">
                    <li class="list-group-item"><b>Length:</b> <pro style="float:right;">@item.Length feet</pro></li>
                    <li class="list-group-item"><b>Width:</b> <pro style="float:right;">@item.Width inches</pro></li>
                    <li class="list-group-item"><b>Thickness:</b> <pro style="float:right;">@item.Thickness inches</pro></li>
                    <li class="list-group-item"><b>Volume:</b> <pro style="float:right;">@item.Volume L</pro></li>
                    <li class="list-group-item"><b>Type:</b> <pro style="float:right;">@item.Type</pro></li>
                    <li class="list-group-item">
                        <b>Equipments: </b>
                        <pro style="float:right;">
                            <div style="text-align:right;">
                                @if (!String.IsNullOrEmpty(item.Equipments))
                                    @foreach (var items in item.Equipments.Split(','))
                                    {
                                        <p style="padding:0;margin:0;">@items</p>
                                    }
                                else
                                {
                                    <p style="padding:0;margin:0;">None</p>
                                }
                            </div>
                        </pro>
                    </li>
                    <li class="list-group-item"><b>Price: </b><pro style="float:right;">@item.Price €</pro></li>

                </ul>
                <div class="card-body">
                    <ul class="nav nav-pills card-header-pills" style="display: flex; justify-content:space-between;">
                        <li class="nav-item">
                            <button @onclick="() => Edit(item.Id)" class="nav-link text-light bg-dark">Edit</button>
                        </li>
                        <li class="nav-item">
                            <button @onclick="() => Details(item.Id)" class="nav-link text-light bg-dark">Details</button>
                        </li>
                        <li class="nav-item">
                            <button @onclick="() => Delete(item.Id)" class="nav-link text-light bg-dark">Delete</button>
                        </li>
                        <li class="nav-item">
                            <button @onclick="() => Chat()" class="nav-link text-light bg-dark">Chat</button>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    }
</div>
@{
    var prevDisabled = !Boards.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Boards.HasNextPage ? "disabled" : "";
}

<button @onclick="async () => { PageNumber--; await Search();   }"
        class="btn btn-default @prevDisabled">
    Previous
</button>
<button @onclick="async () => { PageNumber++; await Search();}"
        class="btn btn-default @nextDisabled">
    Next
</button>

@code
{
    [Parameter]
    public string CurrentFilter { get; set; } = string.Empty;
    [Parameter]
    public string Type { get; set; } = string.Empty;
    [Parameter]
    public string Locked { get; set; } = string.Empty;
    [Parameter]
    public int PageNumber { get; set; } = 1;

    private PaginatedList<SurfsUp.Models.Board> Boards = PaginatedList<Board>.Create(new List<Board>(), 0, 0);
}

@functions {
    protected override async Task OnInitializedAsync()
    {
        Search();
        base.OnInitialized();
    }

    public async Task Search()
    {
        //if (CurrentFilter != null)
        //{
        //    PageNumber = 1;
        //}
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var request = $"v1/userboards/{user.Identity.Name}?search={CurrentFilter}&type={Type}&withRent={true}";

        if (user.IsInRole(StaticDetails.Role_User_Admin))
        {
            request = $"v1/boards/?search={CurrentFilter}&type={Type}&withRent={true}";
        }
            
            var response = await Http.GetAsync(request);
        
        if (response.StatusCode != System.Net.HttpStatusCode.OK)
            return;

        var boards = JsonConvert.DeserializeObject<List<Board>>(response.Content.ReadAsStringAsync().Result);

        int pageSize = 8;
        Boards = PaginatedList<Board>.Create(boards, PageNumber, pageSize);
        StateHasChanged();
    }

    public void Details(int selectedBoard)
    {
        Navigation.NavigateTo($"details/{selectedBoard}");
    }

    public void Create()
    {
        Navigation.NavigateTo($"boards/create");
    }

    public void Edit(int selectedBoard)
    {
        Navigation.NavigateTo($"boards/edit/{selectedBoard}");
    }

    public void Delete(int selectedBoard)
    {
        Navigation.NavigateTo($"boards/delete/{selectedBoard}");
    }

    public void Chat()
    {
        Navigation.NavigateTo($"support");
    }
}