@page "/support"
@using Microsoft.AspNetCore.SignalR.Client
@using SurfsUp.Models
@inject NavigationManager Navigation
@inject AuthenticationStateProvider StateProvider
@implements IAsyncDisposable
@attribute [Authorize]

<PageTitle>Support</PageTitle>

<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
        <button @onclick="Send" disabled="@(!IsConnected)" class="btn btn-dark">Send</button>
    </label>
    
</div>

<hr>

<p class="text-danger">DO NOT SHARE YOUR PERSONAL INFORMATION</p>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput = String.Empty;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        var authState = await StateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        userInput = $"{(authState.User.IsInRole(StaticDetails.Role_User_Admin) ? "ADMIN " : "")} {user.Identity.Name}";

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}